const fs = require('fs');
const path = require('path');

const assetDirs = [
    '/assets/mesh/',
    '/assets/textures/',
    '/assets/sound/',
];

const publicDir = '../public/';
const distDir = '/src/';

const loadAllFN = `
export async function loadAll() {
    const response = await fetch('/assets.bin');
    const arrayBuffer = await response.arrayBuffer();
    var URL = window.URL || window.webkitURL;

    for (let assetName in asset) {
        const blob = new Blob([new Uint8Array(arrayBuffer, asset[assetName].offset, asset[assetName].size)], { type: asset[assetName].type });
        asset[assetName].blob = URL.createObjectURL(blob);
    }
}`;

async function assetInline() {
    let blobContent = Buffer.alloc(0); // Initialize an empty buffer for the blob
    let indexContent = '\n// AUTO GENERATED --- DO NOT EDIT THIS FILE.\n\nexport const asset = {\n';

    var offset = 0;
    for (let dir of assetDirs) {
        const files = fs.readdirSync(path.join(__dirname, dir));
        for (let file of files) {
            const assetPath = path.join(__dirname, dir, file);

            const assetBuffer = fs.readFileSync(assetPath);

            const typeSlice = path.extname(file).slice(1);

            var type = "";
            switch (typeSlice) {
                case "obj":
                    type = "model/obj";
                    break;
                case "jpg":
                    type = "image/jpeg";
                    break;
                case "webp":
                    type = "image/webp";
                    break;
                case "png":
                    type = "image/png";
                    break;
                case "wav":
                    type = "audio/wav";
                    break;
            }

            indexContent += `    "${file.split('.')[0]}": { offset: ${offset}, size: ${assetBuffer.length}, type: "${type}", blob: "" },\n`;

            blobContent = Buffer.concat([blobContent, assetBuffer]);

            offset += assetBuffer.length;
        }
    }

    indexContent += '};\n' + loadAllFN;

    // Write the binary blob to the public directory
    const blobFilePath = path.join(__dirname, publicDir, 'assets.bin');
    if (!fs.existsSync(path.join(__dirname, publicDir))) {
        fs.mkdirSync(path.join(__dirname, publicDir), { recursive: true });
    }
    fs.writeFileSync(blobFilePath, blobContent);

    const distPath = path.join(__dirname, distDir);
    if (!fs.existsSync(distPath)) {
        fs.mkdirSync(distPath, { recursive: true });
    }
    const jsFile = path.join(distPath, 'assets.js');
    fs.writeFileSync(jsFile, indexContent);
}

assetInline();