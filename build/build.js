import * as settings from "./settings.js";
import * as fs from "fs";
import * as path from "path";
import process from "process";

const loader = `
export async function loadAll() {
    const response = await fetch('/assets.bin');
    const arrayBuffer = await response.arrayBuffer();
    var URL = window.URL || window.webkitURL;

    for (let assetName in asset) {
        const blob = new Blob([new Uint8Array(arrayBuffer, asset[assetName].offset, asset[assetName].size)], { type: asset[assetName].type });
        asset[assetName].blob = URL.createObjectURL(blob);
    }
}`;

const header = '\n// AUTO GENERATED BY MAGIC (npm run magic build) --- DO NOT EDIT THIS FILE.\n\nexport const asset = {\n';

const assetTypes = [
    'mesh',
    'textures',
    'sound',
];

const assetEmojiType = ["ðŸ§©", "ðŸŽ¨", "ðŸ”Š"];

export async function build() {
    await assetBundle();
}

export async function assetBundle() {
    settings.print("\nðŸ›   Building asset bundle...", settings.color.white);
    console.time("asset bundle");

    var content = header;

    let blobContent = Buffer.alloc(0);

    var offset = 0;
    var type = 0;
    for (let assetType of assetTypes) {
        const path = "" + process.cwd() + "\\" + settings.config.assets + "\\" + assetType;
        settings.print(`\nðŸ“¦   Building  | ` + path, settings.color.white);

        const files = fs.readdirSync(path);
        for (let file of files) {
            const asset = path + "\\" + file;
            const fileExtension = file.slice(file.lastIndexOf(".") + 1);
            console.log("     " + fileExtension + "  " + asset);

            const assetBuffer = fs.readFileSync(asset);
            const type = getType(fileExtension);

            content += `    "${file.split('.')[0]}": { offset: ${offset}, size: ${assetBuffer.length}, type: "${type}", blob: "" },\n`;
            blobContent = Buffer.concat([blobContent, assetBuffer]);

            offset += assetBuffer.length;
        }

        type += 1;

    }

    content += "};\n" + loader;

    fs.writeFileSync(settings.config.dist + "/assets.bin", blobContent);

    fs.writeFileSync(settings.config.src + "/assets.js", content);
    console.log("\n");

    console.timeEnd("asset bundle");
}

export function getType(fileExtension) {
    switch (fileExtension) {
        case "obj":
            return "model/obj";
        case "jpg":
            return "image/jpeg";
        case "webp":
            return "image/webp";
        case "png":
            return "image/png";
        case "wav":
            return "audio/wav";
    }
}